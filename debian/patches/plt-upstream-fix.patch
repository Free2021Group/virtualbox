Origin: https://www.virtualbox.org/changeset/73086/vbox https://www.virtualbox.org/changeset/73087/vbox + some modifications from Gianfranco Costamagna and Jan Nordholz
Last-Update: 2018-07-13

Index: virtualbox/src/VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h
===================================================================
--- virtualbox.orig/src/VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h
+++ virtualbox/src/VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h
@@ -359,6 +359,7 @@
              * PC relative addressing.
              */
             case R_X86_64_PC32:
+            case R_X86_64_PLT32: /* binutils commit 451875b4f976a527395e9303224c7881b65e12ed feature/regression. */
             {
                 const Elf_Addr SourceAddr = SecAddr + paRels[iRel].r_offset + BaseAddr; /* Where the source really is. */
                 Value -= SourceAddr;
@@ -631,6 +632,7 @@
              * PC relative addressing.
              */
             case R_X86_64_PC32:
+            case R_X86_64_PLT32: /* binutils commit 451875b4f976a527395e9303224c7881b65e12ed feature/regression. */
             {
                 const Elf_Addr SourceAddr = SecAddr + paRels[iRel].r_offset + BaseAddr; /* Where the source really is. */
                 const Elf_Addr Value = SymValue + paRels[iRel].r_addend - SourceAddr;
Index: virtualbox/src/VBox/ValidationKit/bootsectors/bs3kit/VBoxBs3ObjConverter.cpp
===================================================================
--- virtualbox.orig/src/VBox/ValidationKit/bootsectors/bs3kit/VBoxBs3ObjConverter.cpp
+++ virtualbox/src/VBox/ValidationKit/bootsectors/bs3kit/VBoxBs3ObjConverter.cpp
@@ -1860,6 +1860,7 @@
                         fSelfRel = false;
                         RT_FALL_THRU();
                     case R_X86_64_PC32:
+                    case R_X86_64_PLT32: /* binutils commit 451875b4f976a527395e9303224c7881b65e12ed feature/regression. */
                     {
                         /* defaults are ok, just handle the addend. */
                         int32_t iAddend = paRelocs[iReloc].r_addend;
@@ -1877,7 +1878,6 @@
                         continue; /* Ignore this one */
 
                     case R_X86_64_GOT32:
-                    case R_X86_64_PLT32:
                     case R_X86_64_COPY:
                     case R_X86_64_GLOB_DAT:
                     case R_X86_64_JMP_SLOT:
Index: virtualbox/src/VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenFw/Elf64Convert.c
===================================================================
--- virtualbox.orig/src/VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenFw/Elf64Convert.c
+++ virtualbox/src/VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenFw/Elf64Convert.c
@@ -679,6 +679,7 @@
             VerboseMsg ("Relocation:  0x%08X", *(UINT32*)Targ);
             break;
           case R_X86_64_PC32:
+          case R_X86_64_PLT32:
             //
             // Relative relocation: Symbol - Ip + Addend
             //
@@ -785,6 +786,7 @@
             switch (ELF_R_TYPE(Rel->r_info)) {
             case R_X86_64_NONE:
             case R_X86_64_PC32:
+            case R_X86_64_PLT32:
               break;
             case R_X86_64_64:
               VerboseMsg ("EFI_IMAGE_REL_BASED_DIR64 Offset: 0x%08X",
Index: virtualbox/src/VBox/Devices/PC/ipxe/src/util/elf2efi.c
===================================================================
--- virtualbox.orig/src/VBox/Devices/PC/ipxe/src/util/elf2efi.c
+++ virtualbox/src/VBox/Devices/PC/ipxe/src/util/elf2efi.c
@@ -486,7 +486,8 @@
 		/* Generate a 2-byte PE relocation */
 		generate_pe_reloc ( pe_reltab, offset, 2 );
 	} else if ( ( strcmp ( howto->name, "R_386_PC32" ) == 0 ) ||
-		    ( strcmp ( howto->name, "R_X86_64_PC32" ) == 0 ) ) {
+		    ( strcmp ( howto->name, "R_X86_64_PC32" ) == 0 ) ||
+		    ( strcmp ( howto->name, "R_X86_64_PLT32" ) == 0 ) ) {
 		/* Skip PC-relative relocations; all relative offsets
 		 * remain unaltered when the object is loaded.
 		 */

Origin: https://www.virtualbox.org/changeset/64330/vbox
Index: virtualbox/src/libs/xpcom18a4/python/src/PyIID.cpp
===================================================================
--- virtualbox.orig/src/libs/xpcom18a4/python/src/PyIID.cpp
+++ virtualbox/src/libs/xpcom18a4/python/src/PyIID.cpp
@@ -318,12 +318,21 @@
 	return ret;
 }
 
+#if PY_VERSION_HEX >= 0x03020000
+/* static */Py_hash_t
+Py_nsIID::PyTypeMethod_hash(PyObject *self)
+#else
 /* static */long
 Py_nsIID::PyTypeMethod_hash(PyObject *self)
+#endif
 {
 	const nsIID &iid = ((Py_nsIID *)self)->m_iid;
 
+#if PY_VERSION_HEX >= 0x03020000
+	Py_hash_t ret = iid.m0 + iid.m1 + iid.m2;
+#else
 	long ret = iid.m0 + iid.m1 + iid.m2;
+#endif
 	for (int i=0;i<7;i++)
 		ret += iid.m3[i];
 	if ( ret == -1 )
Index: virtualbox/src/libs/xpcom18a4/python/src/PyXPCOM.h
===================================================================
--- virtualbox.orig/src/libs/xpcom18a4/python/src/PyXPCOM.h
+++ virtualbox/src/libs/xpcom18a4/python/src/PyXPCOM.h
@@ -286,7 +286,11 @@
 	static int Py_setattr(PyObject *op, char *name, PyObject *v);
 	static int Py_cmp(PyObject *ob1, PyObject *ob2);
 	static PyObject *Py_richcmp(PyObject *ob1, PyObject *ob2, int op);
+#if PY_VERSION_HEX >= 0x03020000
+	static Py_hash_t Py_hash(PyObject *self);
+#else
 	static long Py_hash(PyObject *self);
+#endif
 };
 
 //////////////////////////////////////////////////////////////////////////
@@ -442,7 +446,11 @@
 #endif
 	static PyObject *PyTypeMethod_richcompare(PyObject *self, PyObject *ob, int op);
 	static PyObject *PyTypeMethod_repr(PyObject *self);
+#if PY_VERSION_HEX >= 0x03020000
+	static Py_hash_t PyTypeMethod_hash(PyObject *self);
+#else
 	static long PyTypeMethod_hash(PyObject *self);
+#endif
 	static PyObject *PyTypeMethod_str(PyObject *self);
 	static void PyTypeMethod_dealloc(PyObject *self);
 	static NS_EXPORT_STATIC_MEMBER_(PyTypeObject) type;
Index: virtualbox/src/libs/xpcom18a4/python/src/TypeObject.cpp
===================================================================
--- virtualbox.orig/src/libs/xpcom18a4/python/src/TypeObject.cpp
+++ virtualbox/src/libs/xpcom18a4/python/src/TypeObject.cpp
@@ -155,13 +155,21 @@
 }
 
 // @pymethod int|Py_nsISupports|__hash__|Implement a hash-code for the XPCOM object using XPCOM identity rules.
+#if PY_VERSION_HEX >= 0x03020000
+/*static*/Py_hash_t PyXPCOM_TypeObject::Py_hash(PyObject *self)
+#else
 /*static*/long PyXPCOM_TypeObject::Py_hash(PyObject *self)
+#endif
 {
 	// We always return the value of the nsISupports *.
 	nsISupports *pUnkThis;
 	if (!Py_nsISupports::InterfaceFromPyObject(self, NS_GET_IID(nsISupports), &pUnkThis, PR_FALSE))
 		return -1;
+#if PY_VERSION_HEX >= 0x03020000
+	Py_hash_t ret = _Py_HashPointer(pUnkThis);
+#else
 	long ret = _Py_HashPointer(pUnkThis);
+#endif
 	pUnkThis->Release();
 	return ret;
 }

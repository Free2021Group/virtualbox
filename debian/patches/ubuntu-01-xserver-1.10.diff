Description: Support the current snapshot of X.Org Server 1.10.
Origin: upstream, http://www.virtualbox.org/changeset/35840

Index: trunk/src/VBox/Additions/x11/vboxmouse/vboxmouse_15.c
===================================================================
--- trunk/src/VBox/Additions/x11/vboxmouse/vboxmouse_15.c (revision 34754)
+++ trunk/src/VBox/Additions/x11/vboxmouse/vboxmouse_15.c (revision 35840)
@@ -133,5 +133,9 @@
 # endif
                                0 /* min X */, 65536 /* max X */,
-                               10000, 0, 10000);
+                               10000, 0, 10000
+# if GET_ABI_MAJOR(ABI_XINPUT_VERSION) >= 12
+                               , Absolute
+# endif                               
+                               );
 
     xf86InitValuatorAxisStruct(device, 1,
@@ -140,5 +144,9 @@
 # endif
                                0 /* min Y */, 65536 /* max Y */,
-                               10000, 0, 10000);
+                               10000, 0, 10000
+# if GET_ABI_MAJOR(ABI_XINPUT_VERSION) >= 12
+                               , Absolute
+# endif                               
+                               );
 #endif
     xf86InitValuatorDefaults(device, 0);
@@ -215,5 +223,5 @@
         xf86Msg(X_ERROR, "%s: Failed to open the VirtualBox device (error %d)\n",
                 pInfo->name, rc);
-        return !Success;
+        return BadMatch;
     }
 
@@ -233,28 +241,18 @@
 }
 
-static InputInfoPtr
-VBoxPreInit(InputDriverPtr drv, IDevPtr dev, int flags)
-{
-    InputInfoPtr pInfo;
+static int
+VBoxPreInitInfo(InputDriverPtr drv, InputInfoPtr pInfo, int flags)
+{
     const char *device;
-
-    if (!(pInfo = xf86AllocateInput(drv, 0)))
-        return NULL;
+    int rc;
 
     /* Initialise the InputInfoRec. */
-    pInfo->name = dev->identifier;
     pInfo->device_control = VBoxProc;
     pInfo->read_input = VBoxReadInput;
-    pInfo->conf_idev = dev;
     /* Unlike evdev, we set this unconditionally, as we don't handle keyboards. */
     pInfo->type_name = XI_MOUSE;
-    pInfo->conversion_proc = VBoxConvert;
-    pInfo->flags = XI86_POINTER_CAPABLE | XI86_SEND_DRAG_EVENTS |
-            XI86_ALWAYS_CORE;
-
-    xf86CollectInputOptions(pInfo, NULL, NULL);
-    xf86ProcessCommonOptions(pInfo, pInfo->options);
-
-    device = xf86CheckStrOption(dev->commonOptions, "Device",
+    pInfo->flags |= XI86_ALWAYS_CORE;
+
+    device = xf86CheckStrOption(pInfo->options, "Device",
                                 "/dev/vboxguest");
 
@@ -267,16 +265,42 @@
     if (pInfo->fd < 0) {
         xf86Msg(X_ERROR, "Unable to open VirtualBox device \"%s\".\n", device);
+        return BadMatch;
+    }
+
+    rc = VBoxProbe(pInfo);
+    if (rc != Success)
+        return rc;
+
+    return Success;
+}
+
+#if GET_ABI_MAJOR(ABI_XINPUT_VERSION) < 12
+static InputInfoPtr
+VBoxPreInit(InputDriverPtr drv, IDevPtr dev, int flags)
+{
+    InputInfoPtr pInfo;
+    const char *device;
+
+    if (!(pInfo = xf86AllocateInput(drv, 0)))
+        return NULL;
+
+    /* Initialise the InputInfoRec. */
+    pInfo->name = dev->identifier;
+    pInfo->conf_idev = dev;
+    pInfo->conversion_proc = VBoxConvert;
+    pInfo->flags = XI86_POINTER_CAPABLE | XI86_SEND_DRAG_EVENTS;
+
+    xf86CollectInputOptions(pInfo, NULL, NULL);
+    xf86ProcessCommonOptions(pInfo, pInfo->options);
+
+    if (VBoxPreInitInfo(drv, pInfo, flags) != Success) {
         xf86DeleteInput(pInfo, 0);
         return NULL;
     }
 
-    if (VBoxProbe(pInfo) != Success) {
-        xf86DeleteInput(pInfo, 0);
-        return NULL;
-    }
-
     pInfo->flags |= XI86_CONFIGURED;
     return pInfo;
 }
+#endif
 
 _X_EXPORT InputDriverRec VBOXMOUSE = {
@@ -284,5 +308,9 @@
     "vboxmouse",
     NULL,
+#if GET_ABI_MAJOR(ABI_XINPUT_VERSION) < 12
     VBoxPreInit,
+#else
+    VBoxPreInitInfo,
+#endif
     NULL,
     NULL,
